===============
 Triage Status
===============

Originally, triage status grouped items into one of three states:

  ============ ============
  English Name Numeric code
  ============ ============
  Now          100
  Later        200
  Done         300
  ============ ============

These legacy values are the main fallback states, but arbitrary
additional triage states can be defined.

>>> from chandler.triage import Triage, NOW, LATER, DONE
>>> class Item: pass
>>> item = Item()
>>> item_triage = Triage(item)

``auto`` and ``manual`` are writable cells, ``calculated`` is
read-only.

>>> item_triage.manual = NOW
>>> item_triage.auto = LATER
>>> item_triage.calculated
100

``calculated`` is the final, user facing triage status. If ``manual``
is None (the default), ``calculated`` will be based on ``auto``.
Otherwise, ``manual`` takes precedence over ``auto``.

>>> item_triage.manual = None
>>> item_triage.calculated
200

If both ``auto`` and ``manual`` are None, the default, calculated is 100.

>>> item2 = Item()
>>> item2_triage = Triage(item2)
>>> item2_triage.manual is item2_triage.auto is None
True
>>> item2_triage.calculated
100

Triage status must be either None, or an integer greater than 99.

>>> item2_triage.constraints   # this shouldn't be necessary, constraints isn't being run
>>> item2_triage.manual = 99
Traceback (most recent call last):
...
TriageRangeError: Can't set triage status to 99

XXX test triage status of 250, calculated falls back to 200

XXX How do I test:
  assuming no chandler.triage.types entry points
  add entry points in code
