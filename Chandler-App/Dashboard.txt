.. index:: hook; chandler.domain.dashboard_entry_addon (registered by chandler.dashboard)
.. _app-dashboard-entry:

======================
The Chandler Dashboard
======================

.. module:: chandler.dashboard

This document describes the classes that support the Chandler
Dashboard, the "list view" of a user's items that supports triage,
sorting, and has various custom columns.

AppDashboardEntry
------------------

Chandler's Application code expands on :ref:`basic dashboard entries
<dashboard-entries>` by defining a Chandler Application
:ref:`entry-addon-hook-central`, :class:`AppDashboardEntry`.

>>> from chandler.dashboard import *
>>> import chandler.core as core
>>> from chandler.event import Event
>>> from chandler.reminder import ReminderList
>>> from chandler.time_services import TimeZone, getNow, setNow, nowTimestamp, fromtimestamp
>>> from datetime import datetime, timedelta
>>> november_first = datetime(2008, 11, 1, 16, tzinfo=TimeZone.eastern)
>>> setNow(november_first)
>>> item = core.Item()
>>> entry = list(item.dashboard_entries)[0]
>>> app_entry = AppDashboardEntry(entry)

:class:`AppDashboardEntry` defines several simple fields,
:attr:`~AppDashboardEntry.is_event`,
:attr:`~AppDashboardEntry.is_starred`,
:attr:`~AppDashboardEntry.triage_status`,
:attr:`~AppDashboardEntry.triage_position`, and
:attr:`~AppDashboardEntry.triage_section`.  These are trivially pulled from :class:`~chandler.triage.Triage`, :class:`~chandler.event.Event` and :class:`~chandler.starred.Starred`.

There are also a few more complicated fields,
:attr:`~AppDashboardEntry.when`,
:attr:`~AppDashboardEntry.reminder_scheduled`, and
:attr:`~AppDashboardEntry.event_reminder_combined`.

>>> app_entry.is_event
False
>>> app_entry.event_reminder_combined
''
>>> event = Event(item).add(base_start=november_first, tzinfo=TimeZone.eastern)
>>> app_entry.is_event
True
>>> app_entry.triage_status
100.0
>>> app_entry.triage_position == nowTimestamp()
True
>>> app_entry.reminder_scheduled
False
>>> app_entry.event_reminder_combined
'event'

:attr:`~AppDashboardEntry.reminder_scheduled` will be ``True`` if the
entry has a reminder scheduled in the **future**.

:attr:`~AppDashboardEntry.event_reminder_combined` will be 'reminder'
if a reminder is scheduled, or if there's no event information.  If
it's not a reminder, and the entry is an event,
:attr:`~AppDashboardEntry.event_reminder_combined` will be 'event',
otherwise it'll be the empty string.

The :attr:`~AppDashboardEntry.when` column is a datetime.  Possible dates
include fixed reminder fire time (relative reminders aren't included),
and event start.  The precedence is youngest future, then oldest past.
If no other date is available, the datetime corresponding to
:attr:`~chandler.core.Item.created` is used.

>>> app_entry.when == event.start
True
>>> reminder = ReminderList(item).add_reminder()
>>> app_entry.reminder_scheduled
False
>>> app_entry.event_reminder_combined
'event'
>>> app_entry.when == event.start
True
>>> reminder.fixed_trigger = november_first + timedelta(days=1)
>>> app_entry.reminder_scheduled
True
>>> app_entry.event_reminder_combined
'reminder'
>>> app_entry.when == reminder.fixed_trigger
True
>>> reminder.fixed_trigger = november_first - timedelta(days=1)
>>> app_entry.reminder_scheduled
False
>>> app_entry.event_reminder_combined
'event'
>>> app_entry.when == event.start
True
>>> Event(item).remove()
>>> app_entry.event_reminder_combined
'reminder'
>>> app_entry.when == reminder.fixed_trigger
True
>>> ReminderList(item).remove_all_reminders()
>>> app_entry.event_reminder_combined
''
>>> app_entry.when == fromtimestamp(item.created)
True

TODO
====
- add created/edited/new/updated
- add status (unread, mainly)

AppEntryAggregate: Mapping sets of Items to sets of DashboardEntries
--------------------------------------------------------------------

The :mod:`~chandler.dashboard` module also provides the class
:class:`AppEntryAggregate`. This is a
:class:`chandler.core.ComputedSet` subclass that accepts a
:class:`~trellis.Set` of Items as its
:attr:`~chandler.core.ComputedSet.input`, producing all associated
:class:`~chandler.core.DashboardEntry` instances.

Let's see how this works in practice. First, we'll start off with a
:class:`~trellis.Set`:

>>> items = trellis.Set()
>>> entries = AppEntryAggregate(input=items)
>>> entries
AppEntryAggregate([])

We'll track changes to entries via a
:class:`~peak.events.trellis.Performer`:

>>> def observe_entries():
...     print "%d item(s) (%d added, %d removed)" % (len(entries),
...                                                  len(entries.added),
...                                                  len(entries.removed))
...     if entries.added or entries.removed:
...         for appEntry in sorted(entries, key=lambda appEntry:(appEntry._item.title, appEntry.triage_status)):
...             print "<%s (title=%s triage=%s)>" % (type(appEntry).__name__, appEntry._item.title, appEntry.triage_status)
>>> performer = trellis.Performer(observe_entries)
0 item(s) (0 added, 0 removed)

Let's now add a few interesting Items to our ``items``
:class:`~peak.events.trellis.Set`:

>>> plain_item = core.Item(title=u'This is my first Item!')
>>> event_item = core.Item(title=u'This is another Item, an Event in fact')
>>> event = Event(event_item).add(base_start=getNow() - timedelta(hours=1),
...                               base_duration=timedelta(hours=3))

>>> items.update((plain_item, event_item))
2 item(s) (2 added, 0 removed)
<AppDashboardEntry (title=This is another Item, an Event in fact triage=100.0)>
<AppDashboardEntry (title=This is my first Item! triage=100.0)>
2 item(s) (0 added, 0 removed)

>>> items.remove(plain_item)
1 item(s) (0 added, 1 removed)
<AppDashboardEntry (title=This is another Item, an Event in fact triage=100.0)>
1 item(s) (0 added, 0 removed)

Let's now make our event have daily recurrence:

>>> from chandler.recurrence import Recurrence
>>> recur = Recurrence(event_item).add(frequency='daily')
2 item(s) (2 added, 1 removed)
<AppDashboardEntry (title=This is another Item, an Event in fact triage=100.0)>
<AppDashboardEntry (title=This is another Item, an Event in fact triage=200.0)>
2 item(s) (0 added, 0 removed)

As (hopefully) expected, we have two new
:class:`~chandler.recurrence.Occurrence` objects, one with
:attr:`~AppDashboardEntry.triage_status` of ``NOW``, and the other
``LATER``. (The :class:`~chandler.core.DashboardEntry` corresponding
to the "master" :class:`~chandler.event.Event` has been removed).

The Dashboard Interaction Component
-----------------------------------

The :class:`Dashboard` class is an interaction component designed to
model Chandler's "Dashboard", also known as "Triage" or "List"
view. This is actually a :class:`chandler.core.Table` subclass
specifically configured to display the correct columns for a set of
:class:`AppDashboardEntry` objects.

The :attr:`~Dashboard.model` of a :class:`Dashboard` is expected to be
a :class:`~peak.events.trellis.Set` of :class:`AppDashboardEntry`
objects. In practice, this would usually be a
:class:`AppEntryAggregate`. For example, we might use our ``entries``
from above:

>>> db = Dashboard(model=entries)

**XXX:** The :attr:`~core.Table.items` attribute name is a little
confusing here, because you might think these are :class:`~core.Item`
instances. Maybe we should change the name to ``rows`` or ``objects``.

>>> type(db.items)
<class 'peak.events.collections.SortedSet'>
>>> db.items.data is db.model
True

Most :class:`Dashboard` columns use a :class:`~core.TableColumn`
subclass, :class:`AppColumn` which get values from a particular
:class:`AppDashboardEntry` cell.

>>> db.star_column
<AppColumn "*" (is_starred)>
>>> list(db.columns)
[<AppColumn "*" (is_starred)>, <TableColumn "Title">, <AppColumn "(( ))" (event_reminder_combined)>, <AppColumn "Date" (when)>, <TriageColumn "Triage" (triage_status)>]

:class:`TriageColumn` is an :class:`AppColumn` subclass that defines a
special sort for triage.

TODO
====
- demonstrate sorting
- extending the Dashboard
- (LATER) sections
