=======================
 Events - Domain Model
=======================

.. module:: chandler.event

``Event`` objects represent a period in time, from a ``start`` to an
``end``.  If that was all there was to it, programmer's lives would be
a lot easier.  In fact, there are a variety of additional fields
associated with events, with varying levels of subtlety.

Most of these fields are modeled on equivalent properties defined in
the iCalendar_ spec.  Chandler's event model also defined a few custom
non-iCalendar fields.  For more on these see `Divergence from
iCalendar`_.

Basic events
============

To create an event, add the ``Event`` Extension to an item.

>>> from chandler.event import *
>>> from chandler.core import Item, Viewer
>>> item = Item()
>>> event = Event(item).add()
>>> event.start is None
True

By default an event's ``start`` and ``end`` are ``None``.  Allowing
``None`` for start gives items the flexibility to be marked as events
without assigning more details.  When working with events, be sure to
check if start is ``None``.

Normally, however, you'll want events to have a start time.

>>> from datetime import datetime
>>> from chandler.time_services import TimeZone, setNow
>>> cinco_de_mayo = datetime(2008, 5, 5, 18, tzinfo=TimeZone.pacific)
>>> event.base_start = cinco_de_mayo
>>> event.start
datetime.datetime(2008, 5, 5, 18, 0, tzinfo=<ICUtzinfo: US/Pacific>)

You can't set ``end`` directly.  It's calculated from ``start`` and
``duration``.  The default ``duration`` for an event is one hour.

>>> event.end
datetime.datetime(2008, 5, 5, 19, 0, tzinfo=<ICUtzinfo: US/Pacific>)
>>> event.base_duration = timedelta(hours=0)
>>> event.end
datetime.datetime(2008, 5, 5, 18, 0, tzinfo=<ICUtzinfo: US/Pacific>)

Notice that you don't work with ``start`` or ``duration`` directly.
Instead you set ``base_start`` and ``base_duration``.

Full-day events
===============

Why the extra base cells?  ``start`` and ``base_start`` are
identical as long as the read-only ``is_day`` cell is ``False``.

>>> event.is_day
False

In most calendar applications, timed-events (events with a date `and`
a time) are distinguished from full-day-events (with a date range, but
no associated time) by rendering full-day-events in a different way.

Full-day-events could be implemented using timed-events by setting
``base_start`` to midnight and ``base_duration`` to one or more days,
but treating full-day-events as semantically different is convenient
(and it's what most calendar users expect).

Chandler has two attributes that cause events to be treated as
full-day-events, ``all_day`` and ``any_time``.

>>> event.all_day = True
>>> event.is_day
True
>>> event.start
datetime.datetime(2008, 5, 5, 0, 0, tzinfo=FloatingTZ(...))
>>> event.end
datetime.datetime(2008, 5, 6, 0, 0, tzinfo=FloatingTZ(...))
>>> event.all_day = False
>>> event.start
datetime.datetime(2008, 5, 5, 18, 0, tzinfo=<ICUtzinfo: US/Pacific>)

When ``is_day`` flips on, ``start`` and ``end`` are changed to
midnight in the "floating" timezone, that is, midnight regardless of
what timezone the computer is in.  See `Floating times`_ for more
details.

Full-day arithmetic
-------------------

Beware, full-day arithmetic can be confusing.

The duration of a full-day-event is always the number of days of
``base_duration`` plus one.  This ensures that every full-day-event
has a duration of at least one day.  This isn't necessarily intuitive,
and it can cause confusion.  The confusion is hard to dispell
completely because of two issues with describing events in English.

First, what is the duration of an event that starts on May 5th and ends on
May 6th?  If the times associated with those dates are both midnight,
the answer is one day.  But in colloquial English, if no time is
specified, it's an event lasting through two days.

Secondly, for full-day-events in Chandler, ``end`` represents midnight
at the end of the last day.  The date of this value will be the day
after the event ends, not the date of the event's last full day.

This means that when displaying ``is_day`` events, if users are shown
a date and no time, they shouldn't be shown the date associated with
``end``, but rather the date one day before ``end``.

On the other hand, if a user inputs an event starting on May 5 and
ending on May 6, ``base_duration`` should be set to one day, not the
actual two-day duration of the event.

>>> event.all_day = True
>>> event.base_duration = timedelta(1)
>>> event.end
datetime.datetime(2008, 5, 7, 0, 0, tzinfo=FloatingTZ(...))

Any-time
--------

``any_time`` is intended to describe events that are relevant for a
particular day or days, but don't have a specific time associated with
them and don't take up much time during the day.

``all_day`` takes precedence over ``any_time``.  To model this,
``base_any_time`` is writable, ``any_time`` is not.  ``any_time`` will
be ``True`` as long as ``base_any_time`` is ``True`` and ``all_day``
is ``False``.

>>> event.base_any_time = True
>>> event.any_time
False
>>> event.all_day = False
>>> event.any_time
True
>>> event.is_day
True
>>> event.base_any_time = False
>>> event.is_day
False

Passage of time
===============

Events have an *is_started* cell tracking whether ``start`` has arrived.
As time passes, these cells are automatically updated by the Trellis.

>>> from peak.events.activity import Time
>>> next_year = datetime(2009, 3, 16, 10, tzinfo=TimeZone.pacific)
>>> setNow(next_year)
>>> item2 = Item()
>>> event2 = Event(item2).add()

If an event doesn't have a start time, it's considered started:

>>> event2.is_started
True

We'll use a Viewer_ to display when *is_started* changes values.

XXX document Viewer somewhere more appropriate

>>> viewer = Viewer(component=event2, cell_name="is_started")
is_started changed to: True
>>> event2.base_start = next_year + timedelta(minutes=2)
is_started changed to: False
>>> Time.advance(180)
is_started changed to: True
>>> event2.base_start = next_year + timedelta(minutes=5)
is_started changed to: False
>>> event2.all_day = True
is_started changed to: True

Events and Triage Status
========================

Events are automatically triaged based on ``is_started``.  If the
event hasn't started, its triage status will be
:const:`~chandler.triage.LATER`, otherwise it will be
:const:`~chandler.triage.NOW`.

>>> viewer.component = Triage(item2)
>>> viewer.cell_name = 'calculated'
calculated changed to: 100.0
>>> event2.all_day = False
calculated changed to: 200.0

Recurrence
==========

XXX recurrence rule, modifications, probably in a separate .txt file

Other event fields
==================

``Event`` has a few cells that don't affect time or duration.

Location
--------

``location`` can be any string, or ``None``.

>>> event.location is None
True
>>> event.location = "El Camino Real"

Transparency
------------

At a high level, ``transparency`` is a choice between 'confirmed' (the
default), 'fyi', and 'tentative'.  However, like various other cells,
there is a ``base_transparency``, because in a few cases
``transparency`` isn't equal to ``base_transparency``.

>>> event.transparency == event.base_transparency == 'confirmed'
True
>>> event.base_transparency = 'tentative'
>>> event.transparency
'tentative'

If an event's ``is_day`` is ``False`` and its ``duration`` is zero, it
takes up no time on the calendar.  In this case, or if the event is
``any_time``, the item has an ``implied_transparency``.

``implied_transparency`` overrides whatever ``base_transparency`` is
set to.

>>> event.base_any_time = True
>>> event.implied_transparency
'fyi'
>>> event.transparency
'fyi'
>>> event.base_any_time = False
>>> event.base_duration = zero_delta
>>> event.transparency
'fyi'
>>> event.base_duration = one_hour
>>> event.transparency
'tentative'


XXX transparency entry-point?  Or just restrict to an enum?  Either
way, constraints should be tested.

Constraints on events
=====================

Read-only cells
---------------

``start``, ``duration``, ``end``, ``is_day``, ``any_time`` and
``transparency`` are all calculated from other cells, they can't be
set directly.

>>> event.start = cinco_de_mayo
Traceback (most recent call last):
 . . .
AttributeError: can't set attribute
>>> event.duration = timedelta(hours=1)
Traceback (most recent call last):
 . . .
AttributeError: can't set attribute

Meaningful duration
-------------------

It would be strange to have an event that lasted for less than no
time, so ``base_duration`` can't be set to a negative timedelta, or to
anything that isn't a timedelta.

>>> event.base_duration = None
Traceback (most recent call last):
  . . .
BadDurationError: Can't set base_duration to: None
>>> event.base_duration = timedelta(days=-1)
Traceback (most recent call last):
  . . .
BadDurationError: Can't set base_duration to: -1 day, 0:00:00

Floating times
--------------

Python's standard datetime module allows datetimes to have a timezone
(to have a non-None tzinfo class), or to have be a "naive" datetime,
with no timezone.

Unfortunately, naive datetimes and timezone-aware datetimes don't play
well together.

>>> naive = cinco_de_mayo.replace(tzinfo=None)
>>> cinco_de_mayo == naive
Traceback (most recent call last):
  . . .
TypeError: can't compare offset-naive and offset-aware datetimes

Chandler doesn't allow events to use naive timezones.

>>> event.base_start = None           # if base_start isn't None, trellis will raise a TypeError
>>> event.base_start = naive          # before Event's contraints can raise a NaiveTimezoneError
Traceback (most recent call last):
  . . .
NaiveTimezoneError: Can't set base_start to: datetime.datetime(2008, 5, 5, 18, 0)

Instead, you should use the TimeZone service's floating tzinfo class.
The floating timezone will change any time the PyICU default time changes,
datetimes using floating time can be compared to timezoned datetimes, and
changes to the default timezone will be tracked by the Trellis.

>>> floater = cinco_de_mayo.replace(year=2007, tzinfo=TimeZone.floating)
>>> floater < cinco_de_mayo
True
>>> event.base_start = floater
>>> event.end
datetime.datetime(2007, 5, 5, 19, 0, tzinfo=FloatingTZ(...))

XXX require start timezone to be a PyICU timezone?

Divergence from iCalendar
=========================

``any_time`` isn't defined in iCalendar.  For most non-Chandler
clients, a ``True`` value for ``any_time`` should be treated just like
``all_day``.  Within Chandler, ``any_time`` events set
``implied_transparency`` to 'fyi' and are rendered slightly
differently.

Also, what Chandler calls ``transparency`` is called STATUS in iCalendar_.
Chandler translates the standard CANCELLED value into 'fyi'.

.. _iCalendar: http://tools.ietf.org/html/rfc2445
.. _Viewer: http://peak.telecommunity.com/DevCenter/Trellis#model-view-controller-and-the-observer-pattern
