============
 Recurrence
============

.. module:: chandler.recurrence

Recurrence allows a single *master* item to be represented as taking
place on many different days.  The representation for a particular
datetime is called an *occurrence*.  The set of all occurrences is
called the recurrence *series*.

To add recurrence to an Item, use the :class:`Recurrence` extension:

>>> from chandler.core import *
>>> from chandler.recurrence import Recurrence, to_hashable
>>> item = Item(title="Book Club")
>>> recur = Recurrence(item).add()


Recurrence and Events
=====================

A recurring item must be associated with a start time.  The default
:attr:`~Recurrence.start` is None, unless the item is an
:class:`~chandler.event.Event`, in which case
:attr:`~Recurrence.start` will match Event's start.

>>> from chandler.event import Event
>>> from datetime import datetime, timedelta
>>> from chandler.time_services import TimeZone, setNow, timestamp
>>> halloween = datetime(2008, 10, 31, 19, tzinfo=TimeZone.pacific)
>>> setNow(halloween + timedelta(days=2))
>>> print recur.start
None
>>> event = Event(item).add(base_start=halloween, base_duration=timedelta(hours=3), tzinfo=TimeZone.pacific)
>>> print recur.start
2008-10-31 19:00:00-07:00


Recurrence Rules
================

iCalendar_ defines a system for describing a *recurrence rule* (rrule
for short).  In the simplest case, an rrule represents a rule like
"repeat at the same time, once a week".

>>> recur.frequency = 'weekly'

Once you've set a frequency, the read-only
:attr:`~Recurrence.rruleset` Trellis cell will be a a dateutil_
rruleset (an rruleset aggregates an rrule with rdates and exdates).

>>> recur.rruleset
<dateutil.rrule.rruleset instance at ...>
>>> for dt in recur.rruleset[:3]:
...     print dt
2008-10-31 19:00:00-07:00
2008-11-07 19:00:00-08:00
2008-11-14 19:00:00-08:00

.. _more-recurrence:

Beyond Recurrence Rules
=======================

The full recurrence series for an item depends on more than
:attr:`~Recurrence.start` and :attr:`~Recurrence.frequency`.
Arbitrary dates can be added to :attr:`~Recurrence.rdates`.

>>> recur.rdates.add(halloween + timedelta(days=1))
>>> for dt in recur.rruleset[:3]:
...     print dt
2008-10-31 19:00:00-07:00
2008-11-01 19:00:00-07:00
2008-11-07 19:00:00-08:00

Similarly, individual dates can be excluded by adding them to
:attr:`~Recurrence.exdates`.

>>> recur.exdates.add(halloween + timedelta(days=1))
>>> recur.exdates.add(halloween + timedelta(days=7))
>>> for dt in recur.rruleset[:3]:
...     print dt
2008-10-31 19:00:00-07:00
2008-11-14 19:00:00-08:00
2008-11-21 19:00:00-08:00

Note that an exdate takes precedence over an rdate.

Never Ending Story
==================

Another factor in recurrence is how long the series should repeat.  By
default, recurrence lasts indefinitely.  Don't iterate over all
occurrences assuming they're finite!  To limit recurrence, add an
:attr:`~Recurrence.until` datetime.

>>> recur.until = halloween + timedelta(days=28)
>>> for dt in recur.rruleset:
...     print dt
2008-10-31 19:00:00-07:00
2008-11-14 19:00:00-08:00
2008-11-21 19:00:00-08:00
2008-11-28 19:00:00-08:00

Alternately, you can set :attr:`~Recurrence.count`, which limits the
rule (ignoring rdates and exdates) to the given number of occurrences.

>>> print recur.count
None
>>> recur.count = 3
>>> for dt in recur.rruleset:
...     print dt
2008-10-31 19:00:00-07:00
2008-11-14 19:00:00-08:00

Because of the exdate, there are only two occurrences, even though
:attr:`~Recurrence.count` was set to three.

>>> recur.exdates.clear(); recur.rdates.clear()
>>> for dt in recur.rruleset:
...     print dt
2008-10-31 19:00:00-07:00
2008-11-07 19:00:00-08:00
2008-11-14 19:00:00-08:00

Note that :attr:`~Recurrence.until` is updated when
:attr:`~Recurrence.count` is set, so you can watch
:attr:`~Recurrence.until` without paying attention to
:attr:`~Recurrence.count`.  Also, :attr:`~Recurrence.count` will be updated by
changes to :attr:`~Recurrence.until` if :attr:`~Recurrence.count` isn't None.

>>> print recur.until
2008-11-14 19:00:00-08:00
>>> recur.count = None
>>> print recur.until
2008-11-14 19:00:00-08:00
>>> recur.until = halloween + timedelta(days=7)
>>> print recur.count
None
>>> recur.count = 12
>>> print recur.until
2009-01-16 19:00:00-08:00
>>> recur.until = halloween + timedelta(days=7)
>>> recur.count
2


Occurrences
===========

Recurrence aggregates together many different dates.  When you want to
work with individual dates in a recurring series, you work with
:class:`Occurrence` instances.

>>> occurrences = list(recur.occurrences_between(halloween, halloween + timedelta(days=7)))
>>> occurrences
[<Occurrence: 2008-10-31 19:00:00-07:00>, <Occurrence: 2008-11-07 19:00:00-08:00>]
>>> first, second = occurrences
>>> first.recurrence_id == halloween
True
>>> first.title
'Book Club'

An :class:`Occurrence` has a special :attr:`~Occurrence.recurrence_id`
attribute which specifies which instance of a recurring series it represents.

An :class:`Occurrence` will inherit most of its attributes from the
master item it's derived from.  The same will be true of
:class:`~chandler.core.Extension` and :ref:`Item AddOns
<item-addon-hook>`.  The exception is start-time related attributes,
which should reflect :attr:`~Occurrence.recurrence_id`, not the master
item's start time.

>>> Event.installed_on(first), Event.installed_on(second)
(True, True)
>>> print Event(first).duration, Event(second).duration
3:00:00 3:00:00
>>> Event(first).start == halloween
True
>>> Event(second).start == halloween + timedelta(days=7)
True

Working with Recurrence IDs
---------------------------

When Occurrences are stored in dictionaries, they're usually stored by
recurrence id.  However, datetimes using Chandler's floating timezone
aren't suitable for use as keys in dictionaries.  As a result, the key
used for dictionaries will be the result of the :func:`to_hashable` function.

>>> to_hashable(halloween)
1225504800.0
>>> first.hashable_recurrence_id == to_hashable(halloween)
True

Triage and Occurrences
----------------------

Triage for recurring events applies to each :class:`Occurrence`
separately.  Like a single :class:`~chandler.event.Event`,
:attr:`~chandler.triage.Triage.auto` triage status will be
:const:`~chandler.triage.LATER` if start time is in the future,
otherwise :const:`~chandler.triage.NOW`.

>>> from chandler.triage import *
>>> first_viewer = Viewer(component=Triage(first),
...                       cell_name="calculated", formatted_name="first")
first changed to: 100.0
>>> second_viewer = Viewer(component=Triage(second),
...                        cell_name="calculated", formatted_name="second")
second changed to: 200.0

Usually, only a few Occurrences should be
:const:`~chandler.triage.NOW`.  To express this common case,
:class:`Recurrence` has a :attr:`~Recurrence.triaged_done_before`
attribute.  By default, this is None.  If set to a datetime,
:attr:`~chandler.triage.Triage.auto` triage will be
:const:`~chandler.triage.DONE` for Occurrences in the past.

>>> recur.triaged_done_before is None
True
>>> recur.triaged_done_before = halloween
first changed to: 300.0
>>> setNow(halloween + timedelta(days=10))
second changed to: 100.0
>>> recur.triaged_done_before = halloween + timedelta(days=7)
second changed to: 300.0

Note that "before" includes the date given.

Exceptions to the pattern of :const:`~chandler.triage.DONE` before a
certain date, :const:`~chandler.triage.LATER` in the future,
:const:`~chandler.triage.NOW` otherwise are expressed using
:meth:`~Recurrence.triage_occurrence` and
:meth:`~Recurrence.clear_occurrence_triage`

>>> recur.triage_occurrence(halloween, timestamp(halloween + timedelta(days=2)), LATER)
first changed to: 200.0
>>> recur.clear_occurrence_triage(halloween)
first changed to: 300.0

XXX for some reason Triage doesn't recalculate unless setNow happens
    before the Occurrences are created.  Need to track down why, seems
    like maybe moving backwards in time is being a problem, but it seems
    to work in other cirumstances

Modifications
=============

Frequently a recurring series will have a few instances that don't
match their parent.  One or more changes to a single Occurrence
together make up a :class:`ModificationRecipe`.  The easiest way to
modify an Occurrence is with the :meth:`~Occurrence.modify` method.

>>> len(recur.modification_recipes)
0
>>> first.modify()
>>> recur.modification_recipes[to_hashable(halloween)]
<chandler.recurrence.ModificationRecipe object at ...>

Without arguments, :meth:`~Occurrence.modify` creates a
:class:`ModificationRecipe` for the Occurrence's recurrence-id, if one
doesn't already exist.

Usually you'll provide a change, too:

>>> first.modify(Event, 'base_duration', timedelta(hours=4))
>>> print Event(first).duration
4:00:00

If you're modifying an attribute on :class:`~chandler.core.Item`, use None for the add-on:

>>> first.modify(None, 'title', "Special book club outing!")
>>> first.title
'Special book club outing!'

To remove a single changed attribute, use :meth:`~Occurrence.remove_change`:

>>> first.remove_change(None, 'title')
>>> first.title
'Book Club'
>>> first.modify(None, 'title', "Book club outing is back on!")

If you want to remove all changes from a modification, use :meth:`~Occurrence.unmodify`:

>>> first.unmodify()
>>> print Event(first).duration, first.title
3:00:00 Book Club


Dashboard Entries and Recurrence
================================

When recurrence is added to an item,
:attr:`~chandler.core.Item.dashboard_entries` changes. Each
:class:`~chandler.core.DashboardEntry` will be associated with an
:class:`Occurrence`.  A single recurring item could have many
associated dashboard entries.

Because a recurring item could have an unlimited number of associated
occurrences, dashboard entries are only created for an occurrence if:

- its triage status is :const:`~chandler.triage.NOW`, or
- it has a modification, or
- it's the "nearest" :const:`~chandler.triage.LATER` or
  :const:`~chandler.triage.DONE` occurrence

>>> recur.count = 5

:meth:`Recurrence.pick_dashboard_entry` will give the
:class:`~chandler.core.DashboardEntry` associated with a particular
recurrence-id, if it exists.

>>> len(item.dashboard_entries)
2
>>> recur.pick_dashboard_entry(halloween) is None
True
>>> recur.pick_dashboard_entry(halloween + timedelta(days=7)) in item.dashboard_entries
True
>>> recur.pick_dashboard_entry(halloween + timedelta(days=14)) in item.dashboard_entries
True

There's one occurrence for the most recent
:const:`~chandler.triage.DONE`, and one for the next
:const:`~chandler.triage.LATER`.  Note that there's *not* an entry for
the first occurrence, or one representing the master.

If time moves forward, we'll have three dashboard entries, as the
:const:`~chandler.triage.LATER` occurrence becomes :const:`~chandler.triage.NOW`:

>>> setNow(halloween + timedelta(days=15))
>>> len(item.dashboard_entries)
3

If the first occurrence is modified, another dashboard entry will be
created, and it'll go away if it's unmodified.

>>> first.modify(None, 'title', 'Historic first book club')
>>> len(item.dashboard_entries)
4
>>> first.unmodify()
>>> len(item.dashboard_entries)
3

Reminders and Recurrence
========================



Collections and Recurrence
==========================

future changes?  delete individual occurrences?  add single occurrence?


XXX point out (and perhaps separately test) the various rrule facets
XXX set/read rrule string

- Multiple RRULEs, EXRULEs: Never seen in the wild, maybe not worth
  implementing?  Actually, occasionally Monday-Wednesday meetings are
  expressed as two different RRULEs, so not impossible.  Can add an
  extra (maybe as string?) and use if necessary

- FUTURE rrule changes: move exdates, modification recurrence-ids,
  what about RDATEs (ignore)?

XXX forbid secondly, minutely, etc.


.. _iCalendar: http://tools.ietf.org/html/rfc2445
.. _dateutil: http://www.labix.org/python-dateutil
.. _Dict: http://peak.telecommunity.com/DevCenter/Trellis#trellis-dict

