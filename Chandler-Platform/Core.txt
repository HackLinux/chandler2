Items, Extensions and DashboardEntries
======================================

.. module:: chandler.core

Items
-----

At the core of the Chandler data model is the
:class:`~chandler.core.Item` class:

>>> from chandler.core import *
>>> item = Item()

Every item has a :attr:`~chandler.core.Item.title`:

>>> item.title
u''

and, of course, you may supply your own
:attr:`~chandler.core.Item.title` at initialization time:

>>> Item(title=u'Hello, world!').title
u'Hello, world!'

or after initialization:

>>> item.title = u'No!'
>>> item.title
u'No!'

Items also automatically have a :attr:`~chandler.core.Item.created`
timestamp cell.  To test it, we'll pretend it's 10AM.

>>> from chandler.time_services import *
>>> from peak.events.activity import Time
>>> from peak.util import plugins
>>> from datetime import datetime
>>> setNow(datetime(2008, 10, 1, 10, tzinfo=TimeZone.pacific))
>>> ten_am = nowTimestamp()
>>> item = Item()

To make sure the :attr:`~chandler.core.Item.created` cell is
immediately set, we'll advance time by an hour before checking its
value.

>>> Time.advance(3600.0)
>>> item.created
1222880400.0
>>> item.created == ten_am
True

.. _collections:

Collections
-----------

A :class:`Collection` is a thin wrapper around
:attr:`~Collection.items`, a :class:`Many`-valued attribute that
contains :class:`Item` instances.

>>> houses = Collection(title="Houses")
>>> houses
<Collection: Houses>
>>> houses.items
TupleBackedSet([])

You can add Items to a collection via  and
:meth:`~Collection.remove` methods, which affect
:attr:`Item.collections`.

The inverse of :attr:`~Collection.items` is :attr:`Item.collections`:

>>> item.collections
TupleBackedSet([])

So, if we use the :meth:`~Collection.add` method to add an item
to our collection:

>>> houses.add(item)
>>> item in houses.items
True

then our collection shows up in the inverse:

>>> item.collections
TupleBackedSet([<Collection: Houses>])

In the same way, when you remove the item from the
:class:`Collection`, the collection is removed from the item's
:attr:`Item.collections`:

>>> houses.remove(item)
>>> item in houses.items
False
>>> item.collections
TupleBackedSet([])

More generally, any object is considered_ a collection if it has:

* an :attr:`~Collection.items` attribute whose value is a Trellis
  Set_ containing Items
* a readable :attr:`~Collection.title` cell
* :meth:`~Collection.add` and :meth:`~Collection.remove` methods
  which accept an :class:`Item` and change :attr:`~Collection.items`
  appropriately

XXX What should add and remove do for read-only collections? Raise an
exception?


Filtered Subsets
----------------

In some cases, you have a :class:`trellis.Set` of objects, and want to
create a subset based on some function applied to the members of the
set.  (For example, Chandler needs to do this to filter the items in
Sidebar collections). :class:`FilteredSubset` is a utility class that
models this situation.

To create one, you need to supply :attr:`~FilteredSubset.input`, the
:class:`trellis.Set` you want to filter, and
:attr:`~FilteredSubset.predicate`, a function that says whether
objects are in the subset or not.

Let's create a simple example, using sets of integers:

>>> import peak.events.trellis as trellis
>>> input = trellis.Set(xrange(10))

Imagine we're interested in viewing only the even elements of
``input``. Then a good predicate will be:

>>> def is_even(i):
...     return i%2 == 0

and our :class:`FilteredSubset` will just be:

>>> filtered = FilteredSubset(input=input, predicate=is_even)

To show how changes are propagated, we'll create a
:class:`~trellis.Performer` cell to observe the contents of
``filtered``, as well as its :attr:`~trellis.Set.added` and
:attr:`trellis.Set.removed` cells, inherited from
:class:`~trellis.Set`:

>>> def observe():
...     print "contents:", sorted(filtered)
...     for i in sorted(filtered.added): print "    added: %s" % (i,)
...     for i in sorted(filtered.removed): print "    removed: %s" % (i,)
>>> c = trellis.Performer(observe)
contents: [0, 2, 4, 6, 8]

Removing an item from the base set that isn't the subset doesn't cause
a change to be propagated:

>>> input.remove(9)

Removing a matching member of the base set does cause a notification,
of course:

>>> input.remove(2)
contents: [0, 4, 6, 8]
    removed: 2
contents: [0, 4, 6, 8]

If objects are added to the base set, and some of them match
:attr:`~FilteredSubset.predicate`, then we'll get added notifications
for those:

>>> input.union_update(set([10, 11, 12]))
contents: [0, 4, 6, 8, 10, 12]
    added: 10
    added: 12
contents: [0, 4, 6, 8, 10, 12]

It's OK to change predicate in mid-stream, so to speak:

>>> filtered.predicate = lambda i: i>7
contents: [8, 10, 11, 12]
    added: 11
    removed: 0
    removed: 4
    removed: 6
contents: [8, 10, 11, 12]

Finally, the same goes for :attr:`~FilteredSubset.input`:

>>> filtered.input = trellis.Set([6, 7, 8, 9])
contents: [8, 9]
    added: 9
    removed: 10
    removed: 11
    removed: 12
contents: [8, 9]

"Aggregated" Sets
-----------------

:class:`FilteredSubset` is actually a subclass of a Trellis Set_-like
class, :class:`AggregatedSet`. This deals with the following general
situation:

   - You have a :class:`~peak.events.trellis.Set` of objects, called
     the :attr:`~AggregatedSet.input`.
   - You have a function, :attr:`~AggregatedSet.get_values`, that returns
     zero or more values for each object in the
     :attr:`~AggregatedSet.input`.
   - You would like to know the :class:`~peak.events.trellis.Set` of
     all values of :attr:`~AggregatedSet.get_values` as you iterate over
     all objects in :attr:`~AggregatedSet.input`.

Chandler encounters the above situation in several cases. For example,
the Dashboard (List) view needs to take a
:class:`~peak.events.trellis.Set` of Items, and compute all the
corresponding :class:`DashboardEntry` objects (and track changes via
the usual :attr:`~peak.events.trellis.Set.added` and
:attr:`~peak.events.trellis.Set.removed` cells). Another case is to
take one or more :class:`Collection` objects, and compute all the
Items they contain.

For demonstration purposes, let's create a simple
:class:`~peak.events.trellis.Component` subclass:

>>> class Cake(trellis.Component):
...    ingredients = trellis.make(tuple, writable=True)

The idea is that we are going to specify a couple of ``Cakes``, and
track the aggregate of all the ingredients we need.

>>> chocolate = Cake(ingredients=("flour", "butter", "sugar", "chocolate"))
>>> carrot = Cake(ingredients=("flour", "butter", "sugar", "carrots", "fertilizer"))

(Naturally, this example is a little contrived: In the real world, it
is highly likely we would be interested in details like how much of
each ingredient we need. Of course, in the real world, the
last-mentioned carrot cake ingredient would be too agricultural for
most people's tastes!)

OK, time to make a :class:`~peak.events.trellis.Set` of cakes:

>>> cakes = trellis.Set([chocolate, carrot])

and from these we'll aggregate all ingredients:

>>> all_ingredients = AggregatedSet(input=cakes,
...                               get_values=lambda cake: cake.ingredients)

Let's check that we do indeed get the correct aggregation of all
ingredients (we use ``sorted`` so that this doctest doesn't depend on
the enumeration order of the set):

>>> sorted(all_ingredients)
['butter', 'carrots', 'chocolate', 'fertilizer', 'flour', 'sugar']

Note that a :class:`AggregatedSet` is computed, so you can't directly
modify its values:

>>> all_ingredients.add('cod liver oil')
Traceback (most recent call last):
...
AttributeError: 'AggregatedSet' object has no attribute 'add'


Let's do our usual trick of using a
:class:`~peak.events.trellis.Performer` cell to note what changes are
being made to ``all_ingredients``:

>>> def observe_ingredients():
...     if all_ingredients.added or all_ingredients.removed:
...         print "added:", " ".join(sorted(all_ingredients.added))
...         print "removed:", " ".join(sorted(all_ingredients.removed))
...         print "new contents:", " ".join(sorted(all_ingredients))
>>> observer = trellis.Performer(observe_ingredients)

Adding a splash of vanilla does change the aggregate all_ingredients as we
expect:

>>> chocolate.ingredients += ('vanilla',)
added: vanilla
removed: 
new contents: butter carrots chocolate fertilizer flour sugar vanilla

Adding the ever-popular fertilizer to our chocolate cake has no affect on
our aggregate ingredients:

>>> chocolate.ingredients += ("fertilizer",)

Similarly, removing sugar from the chocolate cake does nothing:

>>> chocolate.ingredients = ("flour", "butter", "chocolate", "vanilla")

But once it's gone from the carrot cake, it's gone:

>>> carrot.ingredients = ("flour", "butter", "carrots", "fertilizer")
added: 
removed: sugar
new contents: butter carrots chocolate fertilizer flour vanilla


Adding a new ``Cake`` can result in changes:

>>> cakes.add(Cake(ingredients=["flour", "walnuts", "spam"]))
added: spam walnuts
removed: 
new contents: butter carrots chocolate fertilizer flour spam vanilla walnuts



and finally, removing one or more ``Cakes`` will remove their ingredients if
they're not used by any of the remaining ``Cakes``:

>>> cakes.difference_update((chocolate, carrot))
added: 
removed: butter carrots chocolate fertilizer vanilla
new contents: flour spam walnuts

Extensions
----------

Of course, a titled object is not particularly interesting. Items and
Collections support having sets of ``extensions`` installed. These
extensions can be used to customize object attributes and
behaviour. In fact, to make it possible for different plugins to
extend :class:`~chandler.core.Item` co-operatively, subclassing
:class:`~chandler.core.Item` is not recommended.

An item starts out with no extensions installed:

>>> list(item.extensions)
[]

Note that once you have an :class:`~chandler.core.Extension`, you
can't change its item.

>>> e = Extension(item)
>>> e.item = Item()
Traceback (most recent call last):
...
AttributeError: Constants can't be changed

>>> e.item is item
True

:class:`~chandler.core.Extension` objects, which use the
``peak.util.addons`` library, are uniqued:

>>> Extension(item) is e
True

Merely instantiating an :class:`~chandler.core.Extension` on an
:class:`~chandler.core.Item` does not add it to the item’s set of
:attr:`chandler.core.Item.extensions`. So, in our current example:

>>> e in item.extensions
False

However, if we call the ``add()`` method, then our
:class:`~chandler.core.Extension` does get added:

>>> e.add()
<chandler.core.Extension object at 0x...>
>>> e in item.extensions
True

Note that the :class:`~chandler.core.Extension` object itself is
returned from ``add()``; this is for convenience in setting up and
installing extensions.

You can’t add an extension that has already been added:

>>> e.add()
Traceback (most recent call last):
...
ValueError: Extension <class 'chandler.core.Extension'> has already been added

However, you can use the ``remove()`` method to remove an existing
extension:

>>> e.remove()
>>> e in item.extensions
False

As you might expect from the ``add()`` case above, it is an error to try to
``remove()`` an extension that isn’t there:

>>> e.remove()
Traceback (most recent call last):
...
ValueError: Extension <class 'chandler.core.Extension'> is not present

Entities
~~~~~~~~

:class:`Collection` and :class:`Item` have a common base class,
:class:`Entity`.  Any :class:`Entity` can be extended:

>>> entity = Entity()
>>> len(entity.extensions)
0
>>> isinstance(houses, Entity)
True
>>> extended_collection = Extension(houses).add()
>>> Extension.installed_on(houses)
True


Subclassing  :class:`~chandler.core.Extension`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

When you extend :class:`~chandler.core.Item`, you typically want to
add attributes or methods.  The way to do this is to subclass
:class:`~chandler.core.Extension`:

>>> import peak.events.trellis as trellis
>>> class MyExtension(Extension):
...     can_this_be_true = trellis.attr(False)

>>> my_ext = MyExtension(item)

As usual, your subclass does not start off in the
:attr:`~chandler.core.Item.extensions` for the given
:class:`~chandler.core.Item`:

>>> my_ext in item.extensions
False

This is true even if the superclass has been added:

>>> Extension(item).add() in item.extensions
True
>>> my_ext in item.extensions
False

There is also a convenience class method for testing if a given
extension class has been installed on an
:class:`~chandler.core.Item`. So, the last two tests of
``item.``:attr:`~chandler.core.Item.extensions` can be rephrased as:

>>> Extension.installed_on(item)
True
>>> MyExtension.installed_on(item)
False

The ``installed_on`` method also works on an arbitrary
:class:`~chandler.core.Extension` object:

>>> another_extension = MyExtension(Item()).add()
>>> MyExtension.installed_on(another_extension)
True
>>> Extension.installed_on(another_extension)
False

Initializing Attributes When Adding an Extension
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

The ``add()`` method takes keywords, so you can set up attributes when
you add extensions to an item:

>>> new_my_ext = MyExtension(Item()).add(can_this_be_true=True)
>>> new_my_ext.can_this_be_true
True

.. _dashboard-entries:

The :class:`~chandler.core.DashboardEntry` Class
------------------------------------------------

So, we now have a basic concept of an :class:`~chandler.core.Item`, as
titled, creation date-stamped, extensible object. In Chandler 1.0,
such objects could be displayed in a list view, the "All", or
"Dashboard", view.

One of the issues we ran into in the past was the fact that individual
Items ended up corresponding to multiple entries in the Chandler
Dashboard. So, for example, if you had a simple recurring event
(i.e. no modifications), the Dashboard could end up having to show
multiple occurrences of this event, corresponding to NOW, LATER and/or
DONE triage status.

This complexity would be increased if you wanted to model other
relationships between the Items. Example design concepts are:

  - **Clustering:** Here, the user views multiple, edited versions of
    an Item in separate rows in the Dashboard, grouped in some kind of
    hierarchy.
  - **Sub-tasks:** Here, you could imagine an extension that pulls
    sub-entries out from a bulleted list in a Note, and makes
    separately triaged "Items" from them.

There are others, of course, but ideas like this led us to separate
out the notion of :class:`~chandler.core.DashboardEntry` (row in
Dashboard table) from :class:`~chandler.core.Item` (unit of user
information).

A :class:`~chandler.core.DashboardEntry` is a simple data-bearing
object. To create one, you need to pass in an :class:`~chandler.core.Item`,
which cannot be ``None``:

>>> from chandler.core import DashboardEntry
>>> entry = DashboardEntry(None)
Traceback (most recent call last):
...
TypeError: DashboardEntry's subject_item must be an Item

>>> entry = DashboardEntry(item)

Note that :class:`~chandler.core.DashboardEntry` is not an AddOn_; it
is possible to create multiple entries for a given
:class:`~chandler.core.Item`:

>>> entry == DashboardEntry(item)
False

Let's have a look at some :class:`~chandler.core.DashboardEntry`
fields. The :attr:`~chandler.core.DashboardEntry.when` field
is supposed to indicate a time of interest to the user. By
default, it has the same value as the :attr:`~chandler.core.Item.created`
field of its :attr:`~chandler.core.DashboardEntry.subject_item`:

>>> entry.when == item.created
True

Similarly, :attr:`~chandler.core.DashboardEntry.what` is
a summary of the entry, and defaults to the subject's
title:

>>> entry.what == item.title
True
>>> item.title = u"Run around aimlessly"
>>> entry.what
u'Run around aimlessly'

As with other Trellis attributes, you can override
these values at initialization time, or later.

>>> another_entry = DashboardEntry(item, what=u'Bake a cake')
>>> another_entry.what
u'Bake a cake'

An :class:`~chandler.core.Item` tracks any entries created
on its behalf via the :attr:`~chandler.core.Item.dashboard_entries`
attribute. By default, this starts out with a single entry
corresponding to the item:

>>> new_item = Item(title=u'Hello')
>>> list(new_item.dashboard_entries)
[<chandler.core.DashboardEntry object at ...>]

XXX :attr:`~chandler.core.Item.dashboard_entries` doesn't behave like
a "real" bi-ref; i.e. automatically update when you create a new
:class:`~chandler.core.DashboardEntry` for an item.

XXX But in the case of recurrence, a master's entries might have
    subject_item be something other than the master, so perhaps it
    really *shouldn't* be a bi-ref?


Customizing creation of DashboardEntries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
For now, if you want to create multiple :class:`~chandler.core.DashboardEntry`
instances per :attr:`~chandler.core.Item`, there are a couple of routes
you can take. One is to utilize the ``chandler.domain.item_addon`` hook
below, assuming you want entries for any created item. Alternatively, if
your functionality lives in a :class:`~chandler.core.Extension`, a good
route is to override :meth:Extension.add()`, and do your customization
there.

Extending All Items and DashboardEntries
----------------------------------------

Most applications will need additional fields associated with items
and dashboard entries.  To achieve this, either can be extended with
an AddOn_.

.. index:: hook; chandler.domain.item_addon (used by chandler.core)
.. _item-addon-hook:

Adding attributes to all Items
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Extensions are optional.  Some items will have a given Extension added,
others won't.

If an addition to Item should apply to all items, instead of using an
Extension, create an AddOn_ class.  The class can be automatically
added to items when they're initialized by registering the class using
the :ref:`chandler.domain.item_addon <item-addon-hook-central>` hook.

>>> addon_hook = plugins.Hook('chandler.domain.item_addon')
>>> def item_initialized(item):
...     print "Item initialized!"
>>> addon_hook.register(item_initialized)
>>> new_item = Item()
Item initialized!


.. index:: hook; chandler.domain.dashboard_entry_addon (used by chandler.core)
.. _entry-addon-hook:

Adding cells to all DashboardEntries
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Similar to :class:`Item` add-ons, :class:`DashboardEntry` add-ons can
be created using the ref:`chandler.domain.dashboard_entry_addon
<entry-addon-hook-central>` hook.

>>> entry_hook = plugins.Hook('chandler.domain.dashboard_entry_addon')
>>> def entry_initialized(item):
...     print "Entry initialized!"
>>> entry_hook.register(entry_initialized)
>>> new_item.dashboard_entries
Entry initialized!
Set([<chandler.core.DashboardEntry object at ...>])

.. _AddOn: http://pypi.python.org/pypi/AddOns/
.. _Set: http://peak.telecommunity.com/DevCenter/Trellis#trellis-set
.. _considered: http://en.wikipedia.org/wiki/Duck_typing
