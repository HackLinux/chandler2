========================================
 Building Interaction Models in Chandler
========================================

.. currentmodule:: chandler.core

This document discusses the core components of Chandler's Interaction
Model, or IM. You can think of an Interaction Model (sometimes called
an Application Model) as a representation of an application's user
interface, without any of the specifics of layout or rendering. (These
specifics are left to a different, as yet unwritten layer, called
Presentation).

The main reason we want to do this is to make the code unit testable:
In cases where the user interaction side of things is entwined in the
user interface, it becomes difficult to write small, fast-running,
isolated tests in most GUI frameworks. Like the domain model, the IM
is implemented in terms of Trellis_ components. This allows us to
track (and test!) typical application dependency behaviour, like
disabling or hiding parts of the interface, depending on the state of
objects the user has selected.

A side benefit of the above approach is that it makes applications
scriptable, by specifying an API that is free of the specifics of the
UI rendering engine.

We'll illustrate how the IM works by building up a simple example.  In
real-world code, you're likely to have a data layer that is
represented by some kind of domain model, but to keep things simple,
we are going to stick to a simple "domain", that of Celsius to
Fahrenheit temperature conversion. The following code should be
familiar if you've read the Trellis_ documentation:

>>> from peak.events import trellis

>>> class TempConverter(trellis.Component):
...     F = trellis.maintain(
...         lambda self: self.C * 1.8 + 32,
...         initially = 32
...     )
...     C = trellis.maintain(
...         lambda self: (self.F - 32)/1.8,
...         initially = 0
...     )

Our domain is a single ``TempConverter`` instance:

>>> tc = TempConverter()

Text objects
------------
Let's imagine we're trying to write a groundbreaking application
in the highly dynamic world of temperature conversion. How will users
interact with this application? As a first pass, we can imagine that
there are a couple of labelled text boxes, one each for Celsius and
Fahrenheit. In the Chandler IM, widgets were users can type in text
are modelled by :class:`Text` objects:

>>> from chandler.core import *

>>> f_text = Text(label='Fahrenheit', cell=trellis.Cells(tc)['F'])
>>> c_text = Text(label='Celsius', cell=trellis.Cells(tc)['C'])

So, we can now check that our fields got wired up correctly. We can
simulate the user typing "41" into the Fahrenheit field:

>>> f_text.cell.value = 41

and check that our domain model has been updated correctly.

>>> tc.C
5.0

Similarly, changing the domain model should make its way out to
the :class:`Text` objects:

>>> tc.F = 212.0
>>> f_text.cell.value
212.0
>>> c_text.cell.value
100.0

Of course, at this point we haven't really accomplish anything
earth-shattering: all the example shows is that sharing Trellis cells
between components works properly!

As an aside, in this simple case, we can imagine what the presentation
layer will have to do to build a user interface: It will create some
kind of text widget (depending on what API we are using to display
things), and have an event handler that is called to let us know when
the user has changed the text in the widget. This handler will set the
cell's value. In the reverse case, there will probably be a
:class:`trellis.Performer` cell to observe the changes in
:attr:`Text.cell`, and push them to the widget.

Command objects
---------------

A :class:`Command` represents an action a user can take. Typically,
these would be rendered in a user interface as buttons, or menu
items. Let's add a couple of Commands, then:

>>> class Increment(Command):
...    increment = 1
...    def act(self):
...        self.cell.value += self.increment

>>> c_plus_command = Increment(label='+', cell=c_text.cell, increment=1)
>>> c_minus_command = Increment(label='-', cell=c_text.cell, increment=-1)

The :meth:`~Action.act` method specifies what happens when the user
clicks the button or menu item. (In more complex cases, this method
might well be a :func:`trellis.modifier`). So, let's see what happens
if we "click" on the "+" button:

>>> c_plus_command.act()
>>> tc.C
101.0
>>> f_text.cell.value
213.8...

Features
--------

Both :class:`Command` and :class:`Text` are examples of a
:class:`Feature`.  A :class:`Feature` represents a user-visible,
application-independent element of the IM. For example, our ``f_text``
component above has no idea that it has been wired up to a
``TempConverter`` instance; it just knows that has a label and a
cell. The goal of an IM, then, is to assemble a set of features,
making sure they are wired up correctly to domain model components.

We'll explore how this wiring occurs below, but for now, let's look
at some attributes common to all :class:`Feature` instances.

The :attr:`~Feature.enabled` attribute tells the Presentation layer
whether or not the feature's widget should be enabled in the user
interface. By default, features are enabled:

>>> f_text.enabled
True

Similarly, :attr:`~Feature.visible` defaults to ``True``:

>>> c_minus_command.visible
True

Unsetting this would tell the Presentation layer to hide the
corresponding widget, of course.

We've already encountered :attr:`~Feature.label` above, but it's worth
noting that this is a user-visible string, and should therefore be
localizable (assuming you're writing a localizable application). A
similar attribute is :attr:`~Feature.help`. This would often be
presented as some kind of tooltip, and defaults to ``None``:

>>> print f_text.help
None

The above attributes can all be specified via rules. For example,
imagine a consumer safety commission has required us to remove the "+"
button whenever the temperature gets too high. Ordinarily, we could
specify this at the point we instantiated ``c_plus_command``, but we
can also do this on the fly by changing the :attr:`~Feature.visible`
to be a rule cell:

>>> trellis.Cells(c_plus_command)['visible'] = trellis.Cell(lambda: tc.C <= 200.0)
>>> c_plus_command.visible
True

At this point, ``visible`` will be updated whether we change ``tc``
directly, or simulate the user entering a value in one of the
:class:`Text` features:

>>> c_text.cell.value = 250.0
>>> c_plus_command.visible
False

Scopes
------

So, how does data make its way from the domain model into the
application?  To start, we'll need to beef up our one-object "domain
model" a little to make it somewhat realistic. Instead of one single
temperature, let's imagine we're writing a program to monitor the
thermostats in a conference center. We can model this situation
via:

>>> class Thermostat(TempConverter):
...     room_name = trellis.attr('')
...     def __cmp__(self, other):
...         return cmp(self.room_name, other.room_name) or super(TempConverter, self).__cmp__(other)

To store ``Thermostat`` instances, we'll be using a Trellis
:class:`~trellis.collections.SortedSet`, as follows:

>>> import peak.events.collections as collections
>>> thermostats = [
...     Thermostat(room_name='Reykjavik', C=2),
...     Thermostat(room_name='Baguio City', C=25),
...     Thermostat(room_name='Merano', C=16),
... ]

Our application will be slightly more complicated now: we will have
some kind of list control to display all of our Thermostats, and we'll
just edit the selected one using our previous :class:`Feature`
objects. The way we model this is using the concept of a Scope, which
binds together model data to one or more :class:`Feature` instances.

>>> table = Table(
...     model=trellis.Set(thermostats),
...     columns=[
...         TableColumn(get_value=lambda item:item.room_name),
...     ],
... )

Note the presence of the :attr:`~Scope.model` attribute. This is an
arbitrary object that each :class:`Scope` can use to connect up its
various features (to appropriate cells).

We'll discuss the :class:`Table` component later, but let's note for
now this :class:`Feature` is what we're using to handle our list of
thermostats. We can retrieve the current (sorted) list via:

>>> list(item.room_name for item in table.items)
['Baguio City', 'Merano', 'Reykjavik']

The :class:`Table` has a :attr:`~Table.selected_item` attribute that
defaults to the first item in its list.

>>> table.columns[0].get_value(table.selected_item)
'Baguio City'

>>> table.selected_item = table.items[2]

Now, we can create a second :class:`Scope`, which is the area where we
can edit the Celsius and Fahrenheit temperatures for the selected
thermostat:

>>> detail_scope = Scope(
...     model=trellis.Cells(table)['selected_item'],
...     features=(c_text, f_text)
... )

Of course, we need the ``cell`` attributes of our two :attr:`Text`
features to point to the correct field in the currently selected item.
The most straightforward way to do this is to use the
:meth:`~Scope.make_model_cell` API.

>>> c_text.cell = detail_scope.make_model_cell('C')

This returned cell is bound to the 'C' attribute of whatever the
:class:`Scope`'s :attr:`~Feature.model` happens to be (i.e. it
updates correctly if :attr:`~Feature.model` changes).

We can go ahead and create the same kind of cell for f_text:

>>> f_text.cell = detail_scope.make_model_cell('F')

To observe what's happening to the two :class:`Text` values here, let's
create a performer cell, which will print the values whenever they
change:

>>> def scope_watcher(scope):
...     def rule():
...         for feature in sorted(scope.features, key=lambda f: f.label):
...             print "%s: %s" % (feature.label, feature.cell.value)
...     return trellis.Performer(rule)
>>> watcher = scope_watcher(detail_scope)
Celsius: 2
Fahrenheit: 35.6

At this point, we can double-check that the Celsius text has the
correct value:

>>> table.items[2].C
2
>>> c_text.cell.value
2
>>> c_text.scope is detail_scope
True

Let's imagine the user selects the "Baguio City" item in the
table. Then, c_text and f_text will update accordingly:

>>> table.selected_item = thermostats[1]
Celsius: 25
Fahrenheit: 77.0

Altering one of the :class:`Text`'s cells (i.e. simulating entering a
new value in the user interface) also causes both displayed values to change:

>>> f_text.cell.value = 86
Celsius: 30.0
Fahrenheit: 86
>>> table.selected_item.C
30.0

The :meth:`~Scope.make_model_cell` API is common enough that it has a
meta-programming form that you can use in a subclass declaration:

>>> class DetailScope(Scope):
...    woot = Scope.feature_cells(
...        C = lambda: Text(label=u'Celsius'),
...        F = lambda: Text(label=u'Fahrenheit'),
...        room_name = lambda: Text(label=u'Room Name')
...    )

>>> detail_scope = DetailScope(model=trellis.Cells(table)['selected_item'])
>>> watcher = scope_watcher(detail_scope)
Celsius: 30.0
Fahrenheit: 86
Room Name: Baguio City

Let's select the last item in the table:

>>> table.selected_item = table.items[2]
Celsius: 2
Fahrenheit: 35.6
Room Name: Reykjavik

Styling and Tags
----------------

Further Reading
---------------

The `basic design`_ of this API was originally laid out by Phillip
J. Eby, drawing on ideas from the Model View Presenter pattern, for
example in `Taligent`_ and `Dolphin Smalltalk`_. Martin Fowler has an
interesting overview and some history of `GUI architectures`_.

.. _Trellis: http://peak.telecommunity.com/DevCenter/Trellis
.. _basic design: <http://www.eby-sarna.com/pipermail/peak/2007-November/002799.html>
.. _Taligent: <http://www.wildcrest.com/Potel/Portfolio/mvp.pdf>
.. _Dolphin Smalltalk: <http://www.object-arts.com/papers/TwistingTheTriad.PDF>
.. _GUI architectures: <http://martinfowler.com/eaaDev/uiArchs.html>
